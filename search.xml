<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>二级制调试工具</title>
      <link href="/2023/04/04/er-jin-zhi-diao-shi-gong-ju/"/>
      <url>/2023/04/04/er-jin-zhi-diao-shi-gong-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="1-strace"><a href="#1-strace" class="headerlink" title="1.strace"></a>1.strace</h2><p><code>strace</code> 是一个在 Linux 系统上常用的调试工具，可以用来跟踪进程的系统调用和信号。它可以帮助开发者了解程序的运行情况，发现可能存在的问题和错误。</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><pre class="line-numbers language-none"><code class="language-none">strace [options] command [args]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，<code>command</code> 表示需要跟踪的程序，<code>args</code> 表示程序的参数。<code>options</code> 是一些可选参数，用于指定跟踪的选项。</p><p>例如，要跟踪运行 <code>ls</code> 命令的系统调用情况，可以使用以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">strace</span> <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行结果会输出 <code>ls</code> 命令的所有系统调用。如果想将结果输出到文件中，可以使用 <code>-o</code> 选项：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">strace</span> <span class="token parameter variable">-o</span> trace.log <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时，<code>ls</code> 命令的系统调用信息会输出到 <code>trace.log</code> 文件中。<br><code>strace</code> 还提供了许多其它的选项，如 <code>-p</code> 选项用于跟踪指定进程的系统调用，<code>-f</code> 选项用于跟踪子进程的系统调用，<code>-e</code> 选项用于指定需要跟踪的系统调用类型等等。可以使用 <code>man strace</code> 命令查看完整的帮助文档。<br>除了基本的使用方法，<code>strace</code> 还提供了许多高级的选项和功能，下面介绍几个常用的选项和用法。</p><h3 id="跟踪某个系统调用"><a href="#跟踪某个系统调用" class="headerlink" title="跟踪某个系统调用"></a>跟踪某个系统调用</h3><p>有时候我们只想跟踪某个特定的系统调用，可以使用 <code>-e</code> 选项来指定：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">strace</span> <span class="token parameter variable">-e</span> <span class="token function">open</span> <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的命令只会跟踪 <code>ls</code> 命令中的 <code>open</code> 系统调用。</p><h3 id="跟踪系统调用的参数和返回值"><a href="#跟踪系统调用的参数和返回值" class="headerlink" title="跟踪系统调用的参数和返回值"></a>跟踪系统调用的参数和返回值</h3><p>通过 <code>-v</code> 选项，可以让 <code>strace</code> 输出系统调用的参数和返回值：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">strace</span> <span class="token parameter variable">-v</span> <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的命令会输出 <code>ls</code> 命令执行过程中每个系统调用的参数和返回值。</p><h3 id="跟踪动态链接库"><a href="#跟踪动态链接库" class="headerlink" title="跟踪动态链接库"></a>跟踪动态链接库</h3><p>许多程序在运行期间会动态链接一些库文件，可以使用 <code>-e trace=dl</code> 选项来跟踪这些动态链接库的加载情况：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">strace</span> <span class="token parameter variable">-e</span> <span class="token assign-left variable">trace</span><span class="token operator">=</span>dl <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的命令会输出 <code>ls</code> 命令动态链接的库文件的加载情况。</p><h3 id="过滤输出"><a href="#过滤输出" class="headerlink" title="过滤输出"></a>过滤输出</h3><p><code>strace</code> 输出的信息可能会非常多，可以使用 <code>-e trace=</code> 选项来过滤输出。例如，要只输出 <code>open</code> 和 <code>read</code> 两个系统调用的信息，可以使用以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">strace</span> <span class="token parameter variable">-e</span> <span class="token assign-left variable">trace</span><span class="token operator">=</span>open,read <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的命令只会输出 <code>ls</code> 命令中的 <code>open</code> 和 <code>read</code> 系统调用的信息。</p><h3 id="输出调用时间"><a href="#输出调用时间" class="headerlink" title="输出调用时间"></a>输出调用时间</h3><p>使用 <code>-T</code> 选项可以让 <code>strace</code> 输出每个系统调用的时间戳，用于分析程序的性能瓶颈：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">strace</span> <span class="token parameter variable">-T</span> <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的命令会输出 <code>ls</code> 命令执行过程中每个系统调用的时间戳。</p><h3 id="跟踪子进程"><a href="#跟踪子进程" class="headerlink" title="跟踪子进程"></a>跟踪子进程</h3><p>有些程序会创建子进程，可以使用 <code>-f</code> 选项来跟踪子进程的系统调用：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">strace</span> <span class="token parameter variable">-f</span> firefox<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的命令会跟踪 <code>firefox</code> 浏览器及其所有子进程的系统调用。</p><p>下面再介绍一些 <code>strace</code> 的高级选项和用法：</p><h3 id="输出调用堆栈"><a href="#输出调用堆栈" class="headerlink" title="输出调用堆栈"></a>输出调用堆栈</h3><p>使用 <code>-c</code> 选项可以让 <code>strace</code> 输出每个系统调用的调用次数和耗时总和。如果再加上 <code>-f</code> 选项，还可以输出每个子进程的调用次数和耗时总和：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">strace</span> <span class="token parameter variable">-c</span> <span class="token parameter variable">-f</span> firefox<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的命令会输出 <code>firefox</code> 浏览器及其所有子进程每个系统调用的调用次数和耗时总和。</p><h3 id="跟踪文件操作"><a href="#跟踪文件操作" class="headerlink" title="跟踪文件操作"></a>跟踪文件操作</h3><p>使用 <code>-e trace=file</code> 选项可以让 <code>strace</code> 跟踪文件操作的系统调用，如 <code>open</code>、<code>read</code>、<code>write</code> 等。如果再加上 <code>-e trace=network</code> 选项，还可以跟踪网络操作的系统调用，如 <code>socket</code>、<code>connect</code>、<code>send</code>、<code>recv</code> 等：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">strace</span> <span class="token parameter variable">-e</span> <span class="token assign-left variable">trace</span><span class="token operator">=</span>file,network <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的命令会输出 <code>ls</code> 命令执行过程中的文件操作和网络操作的系统调用。</p><h3 id="跟踪系统信号"><a href="#跟踪系统信号" class="headerlink" title="跟踪系统信号"></a>跟踪系统信号</h3><p>使用 <code>-e trace=signal</code> 选项可以让 <code>strace</code> 跟踪系统信号的发生情况：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">strace</span> <span class="token parameter variable">-e</span> <span class="token assign-left variable">trace</span><span class="token operator">=</span>signal firefox<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的命令会输出 <code>firefox</code> 浏览器及其所有子进程接收到的系统信号。</p><h3 id="跟踪进程的系统调用时间"><a href="#跟踪进程的系统调用时间" class="headerlink" title="跟踪进程的系统调用时间"></a>跟踪进程的系统调用时间</h3><p>使用 <code>-T -ttt</code> 选项可以让 <code>strace</code> 输出每个系统调用的相对时间和绝对时间：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">strace</span> <span class="token parameter variable">-T</span> <span class="token parameter variable">-ttt</span> <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的命令会输出 <code>ls</code> 命令执行过程中每个系统调用的相对时间和绝对时间。</p><h3 id="跟踪进程的系统调用错误"><a href="#跟踪进程的系统调用错误" class="headerlink" title="跟踪进程的系统调用错误"></a>跟踪进程的系统调用错误</h3><p>使用 <code>-e trace=error</code> 选项可以让 <code>strace</code> 跟踪进程的系统调用错误：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">strace</span> <span class="token parameter variable">-e</span> <span class="token assign-left variable">trace</span><span class="token operator">=</span>error <span class="token function">ls</span> /nonexistent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的命令会输出 <code>ls</code> 命令执行过程中发生的系统调用错误。</p><h2 id="2-ltrace"><a href="#2-ltrace" class="headerlink" title="2.ltrace"></a>2.ltrace</h2><p><code>ltrace</code> 是 Linux 下的一款动态库调用跟踪工具，可以跟踪程序执行时所调用的动态库函数，并输出它们的参数和返回值。</p><p>和 <code>strace</code> 类似，<code>ltrace</code> 也可以用于调试程序，查找程序中的问题，或者分析程序的性能瓶颈等。</p><p>下面介绍一些 <code>ltrace</code> 的基本用法和选项：</p><h3 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h3><p><code>ltrace</code> 的基本用法和 <code>strace</code> 类似，只需要在命令前加上 <code>ltrace</code> 即可，例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ltrace <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的命令会跟踪 <code>ls</code> 命令所调用的动态库函数，并输出它们的参数和返回值。</p><h3 id="跟踪指定的函数"><a href="#跟踪指定的函数" class="headerlink" title="跟踪指定的函数"></a>跟踪指定的函数</h3><p>可以使用 <code>-e</code> 选项来指定要跟踪的函数，例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ltrace <span class="token parameter variable">-e</span> getenv <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的命令会跟踪 <code>ls</code> 命令中调用 <code>getenv</code> 函数的情况，并输出它的参数和返回值。</p><h3 id="过滤输出-1"><a href="#过滤输出-1" class="headerlink" title="过滤输出"></a>过滤输出</h3><p>和 <code>strace</code> 一样，<code>ltrace</code> 的输出也可能非常多，可以使用 <code>-c</code> 选项来统计函数调用次数和耗时总和，或者使用 <code>-S</code> 选项来按照函数调用次数或者耗时排序输出。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p><code>ltrace</code> 的输出格式可以使用 <code>-n</code> 选项来指定，目前支持的格式有 <code>raw</code>、<code>call</code> 和 <code>symaddr</code>。其中，<code>raw</code> 格式输出原始的函数调用信息，<code>call</code> 格式输出函数名和参数，<code>symaddr</code> 格式输出函数名和地址。</p><p>例如，要输出 <code>ls</code> 命令中调用的函数名和地址，可以使用以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ltrace <span class="token parameter variable">-n</span> symaddr <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="过滤动态链接库"><a href="#过滤动态链接库" class="headerlink" title="过滤动态链接库"></a>过滤动态链接库</h3><p>有些程序会调用很多的动态链接库，可以使用 <code>-x</code> 选项来过滤掉不需要跟踪的动态链接库。例如，要只跟踪 <code>libc</code> 动态链接库中的函数调用，可以使用以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ltrace <span class="token parameter variable">-x</span> libc <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下面再介绍一些 <code>ltrace</code> 的高级选项和用法：</p><h3 id="跟踪指定进程"><a href="#跟踪指定进程" class="headerlink" title="跟踪指定进程"></a>跟踪指定进程</h3><p>可以使用 <code>-p</code> 选项来跟踪指定进程的动态库函数调用情况。例如，要跟踪进程 ID 为 1234 的进程的动态库函数调用，可以使用以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ltrace <span class="token parameter variable">-p</span> <span class="token number">1234</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="跟踪所有进程"><a href="#跟踪所有进程" class="headerlink" title="跟踪所有进程"></a>跟踪所有进程</h3><p>可以使用 <code>-a</code> 选项来跟踪所有进程的动态库函数调用情况。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ltrace <span class="token parameter variable">-a</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="跟踪线程"><a href="#跟踪线程" class="headerlink" title="跟踪线程"></a>跟踪线程</h3><p>可以使用 <code>-t</code> 选项来跟踪线程的动态库函数调用情况。例如，要跟踪进程 ID 为 1234 的进程中线程 ID 为 5678 的线程的动态库函数调用，可以使用以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ltrace <span class="token parameter variable">-p</span> <span class="token number">1234</span> <span class="token parameter variable">-t</span> <span class="token number">5678</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="跟踪库函数的递归调用"><a href="#跟踪库函数的递归调用" class="headerlink" title="跟踪库函数的递归调用"></a>跟踪库函数的递归调用</h3><p>可以使用 <code>-L</code> 选项来跟踪库函数的递归调用情况。例如，要跟踪 <code>strlen</code> 函数的递归调用情况，可以使用以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ltrace <span class="token parameter variable">-L</span> strlen abcdefg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="跟踪函数库的系统调用"><a href="#跟踪函数库的系统调用" class="headerlink" title="跟踪函数库的系统调用"></a>跟踪函数库的系统调用</h3><p>可以使用 <code>-s</code> 选项来跟踪函数库的系统调用。例如，要跟踪 <code>libc</code> 动态链接库中的系统调用，可以使用以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ltrace <span class="token parameter variable">-s</span> libc <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="跟踪函数库的库函数"><a href="#跟踪函数库的库函数" class="headerlink" title="跟踪函数库的库函数"></a>跟踪函数库的库函数</h3><p>可以使用 <code>-r</code> 选项来跟踪函数库的库函数。例如，要跟踪 <code>libc</code> 动态链接库中的 <code>malloc</code> 函数的调用情况，可以使用以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ltrace <span class="token parameter variable">-r</span> libc malloc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-strings"><a href="#3-strings" class="headerlink" title="3.strings"></a>3.strings</h2><p><code>strings</code> 是一个 Linux&#x2F;Unix 命令行工具，它可以从一个二进制文件中提取所有的可打印字符串，即 ASCII 码表中的可见字符序列。这些字符串包括程序代码中的字符串常量、错误信息、调试信息等。</p><p>使用 <code>strings</code> 命令可以帮助我们快速地查看一个二进制文件中包含的文本信息，有助于分析程序的功能和特性。</p><p>下面是 <code>strings</code> 命令的一些基本用法和选项：</p><h3 id="基本用法-2"><a href="#基本用法-2" class="headerlink" title="基本用法"></a>基本用法</h3><p><code>strings</code> 命令的基本用法非常简单，只需要在命令行中指定要提取字符串的二进制文件即可，例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">strings /usr/bin/ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的命令将会提取 <code>/usr/bin/ls</code> 文件中的所有可打印字符串。</p><h3 id="指定字符串长度"><a href="#指定字符串长度" class="headerlink" title="指定字符串长度"></a>指定字符串长度</h3><p>默认情况下，<code>strings</code> 命令会提取所有长度大于等于 4 的可打印字符串，可以使用 <code>-n</code> 选项来指定最小字符串长度，例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">strings <span class="token parameter variable">-n</span> <span class="token number">8</span> /usr/bin/ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的命令将会提取 <code>/usr/bin/ls</code> 文件中所有长度大于等于 8 的可打印字符串。</p><h3 id="指定字符集"><a href="#指定字符集" class="headerlink" title="指定字符集"></a>指定字符集</h3><p>默认情况下，<code>strings</code> 命令只会提取 ASCII 字符集中的可打印字符，可以使用 <code>-e</code> 选项来指定要提取的字符集，例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">strings <span class="token parameter variable">-e</span> S /usr/bin/ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的命令将会提取 <code>/usr/bin/ls</code> 文件中所有 ISO-8859-1 字符集中的可打印字符。</p><h3 id="输出偏移地址"><a href="#输出偏移地址" class="headerlink" title="输出偏移地址"></a>输出偏移地址</h3><p>可以使用 <code>-t</code> 选项来输出字符串在文件中的偏移地址，例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">strings <span class="token parameter variable">-t</span> x /usr/bin/ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的命令将会提取 <code>/usr/bin/ls</code> 文件中所有可打印字符串，并输出它们在文件中的偏移地址。</p><h3 id="忽略-NUL-字符"><a href="#忽略-NUL-字符" class="headerlink" title="忽略 NUL 字符"></a>忽略 NUL 字符</h3><p>默认情况下，<code>strings</code> 命令会将 NUL 字符（ASCII 码为 0）作为字符串的终止符，可以使用 <code>-a</code> 选项来忽略 NUL 字符，例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">strings <span class="token parameter variable">-a</span> /usr/bin/ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的命令将会提取 <code>/usr/bin/ls</code> 文件中所有可打印字符串，并将 NUL 字符作为普通字符处理。</p><h3 id="过滤字符串"><a href="#过滤字符串" class="headerlink" title="过滤字符串"></a>过滤字符串</h3><p>可以使用管道符号 <code>|</code> 将 <code>strings</code> 命令的输出传递给 <code>grep</code> 命令，从而过滤掉不需要的字符串，例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">strings /usr/bin/ls <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"ls --color"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的命令将会提取 <code>/usr/bin/ls</code> 文件中所有可打印字符串，并过滤掉不包含字符串 “ls –color” 的行。</p><p>下面再介绍一些 <code>strings</code> 的高级选项和用法：</p><h3 id="提取多个文件"><a href="#提取多个文件" class="headerlink" title="提取多个文件"></a>提取多个文件</h3><p>可以在命令行中指定多个二进制文件，<code>strings</code> 命令将会提取它们中所有的可打印字符串。例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">strings /usr/bin/ls /usr/bin/cat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的命令将会提取 <code>/usr/bin/ls</code> 和 <code>/usr/bin/cat</code> 文件中所有可打印字符串。</p><h3 id="递归提取字符串"><a href="#递归提取字符串" class="headerlink" title="递归提取字符串"></a>递归提取字符串</h3><p>可以使用 <code>-r</code> 选项来递归地提取目录中所有的二进制文件中的可打印字符串，例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">strings <span class="token parameter variable">-r</span> /usr/bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的命令将会递归地提取 <code>/usr/bin</code> 目录中所有二进制文件中的可打印字符串。</p><h3 id="提取-ELF-文件符号表"><a href="#提取-ELF-文件符号表" class="headerlink" title="提取 ELF 文件符号表"></a>提取 ELF 文件符号表</h3><p>可以使用 <code>-a</code> 选项来提取 ELF 文件的符号表中的字符串，例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">strings <span class="token parameter variable">-a</span> /usr/lib/libc.so.6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的命令将会提取 <code>/usr/lib/libc.so.6</code> 文件中符号表中的所有字符串。</p><h3 id="指定输出文件"><a href="#指定输出文件" class="headerlink" title="指定输出文件"></a>指定输出文件</h3><p>可以使用 <code>&gt;</code> 符号将 <code>strings</code> 命令的输出重定向到文件中，例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">strings /usr/bin/ls <span class="token operator">></span> ls_strings.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的命令将会提取 <code>/usr/bin/ls</code> 文件中所有可打印字符串，并将它们保存到 <code>ls_strings.txt</code> 文件中。</p><h3 id="使用正则表达式匹配字符串"><a href="#使用正则表达式匹配字符串" class="headerlink" title="使用正则表达式匹配字符串"></a>使用正则表达式匹配字符串</h3><p>可以使用 <code>-o</code> 选项和正则表达式来匹配要提取的字符串。例如，要提取所有以 “hello” 开头的字符串，可以使用以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">strings <span class="token parameter variable">-o</span> /usr/bin/ls <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"^hello"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
